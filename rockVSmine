importing dependancies

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

Data Collection and Data Processing

#loading the dataset to pandas dataframe
sonar_data= pd.read_csv("/content/Copy of sonar data.csv", header=None)

sonar_data.head(5)

#number of rows and columns
sonar_data.shape

sonar_data.describe()  #describe gives statistical measures of the data

sonar_data[60].value_counts()

M-> Mine
R -> Rock

sonar_data.groupby(60).mean()

from re import S
#seperating data and lables
X  = sonar_data.drop(columns=60, axis=1)
Y =sonar_data[60]

print(X)
print("-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-")
print(Y)

Training and Test data

X_train, X_test, Y_train, Y_test = train_test_split(X, Y , test_size = 0.1 , stratify= Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

Model Training -> logistic regression

model = LogisticRegression()

Training the logistic regression model with training data

model.fit(X_train, Y_train)

Model Evaluation

#accuracy on the training data
X_train_predcition =model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_predcition, Y_train)

print("Accuracy on training data : ", training_data_accuracy)

#accuracy on the test data
X_test_predcition =model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predcition, Y_test)

print("Accuracy on test data : ", test_data_accuracy)

Making a predictive system

input_data =( 0.0731,0.1249,0.1665,0.1496,0.1443,0.2770,0.2555,0.1712,0.0466,0.1114,0.1739,0.3160,0.3249,0.2164,0.2031,0.2580,0.1796,0.2422,0.3609,0.1810,0.2604,0.6572,0.9734,0.9757,0.8079,0.6521,0.4915,0.5363,0.7649,0.5250,0.5101,0.4219,0.4160,0.1906,0.0223,0.4219,0.5496,0.2483,0.2034,0.2729,0.2837,0.4463,0.3178,0.0807,0.1192,0.2134,0.3241,0.2945,0.1474,0.0211,0.0361,0.0444,0.0230,0.0290,0.0141,0.0161,0.0177,0.0194,0.0207,0.0057)
#changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction= model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
  print("The object is a Rock")
else:
    print("The object is a Mine")


